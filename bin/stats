#!/usr/bin/env python

"""stats

Download sports statistics & write the results to a human readable JSON file
"""

from __future__ import print_function
from datetime import datetime
import argparse
import logging
import os
import sportsstats.nba
import sportsstats.utils

# TODO: add support for more flexible date parsing
#       https://github.com/dateutil/dateutil/
#       https://github.com/scrapinghub/dateparser
def _valid_date(date, date_format="%m/%d/%Y"):
    """Ensures a valid date.

    Args:
        date (str): The date in the form specified in `date_format`.
        date_format (str): The date format to parse `date` according to.

    Returns:
        datetime: The date object.

    Raises:
        argparse.ArgumentTypeError: If the date cannot be parsed according to
            the specified format.
    """
    try:
        return datetime.strptime(date, date_format)
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(date)
        raise argparse.ArgumentTypeError(msg)


def _valid_date_range(s):
    """Ensure a valid date range.

    Args:
        s (str): A date range or single date in the form `date1-date2`

    Returns:
        (datetime, datetime): The start & end dates or (start, start).

    Raises:
        argparse.ArgumentTypeError: If either date is not valid or if date(s)
            cannot be inferred according to the above format.
    """
    dates = []
    for date in s.split('-'):
        dates.append(_valid_date(date))
    if len(dates) is 2:
        start = dates[0]
        end = dates[1]
    elif len(dates) is 1:
        start = end = dates[0]
    else:
        msg = "Not a valid date range or date: '{0}'.".format(s)
        raise argparse.ArgumentTypeError(msg)
    return (start, end)


def parse_args():
    """Parse and validate command line arguments.
    """
    parser = argparse.ArgumentParser(description='Download sports statistics.',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    dt = datetime.now()
    today = dt.strftime('%m/%d/%Y')
    parser.add_argument('-d', '--date', action='store', type=_valid_date_range,
                        default=today,
                        help='dash separated date range '
                             'or single date to download')

    parser.add_argument("-v", "--verbose", action="count",
                        help="increase output verbosity")

    #  parser.add_argument('-f', '-o', '--output', action='store',
                        #  type=_unique_path, help='file output path')

    #  #  path = os.path.relpath('nba.json')
    #  parser.add_argument('-i', '--input', action='store', type=_open_file,
                        #  help='file input path')
    return parser.parse_args()


def main():
    args = parse_args()
    logger = sportsstats.utils.init_logging(args.verbose)
    print("Downloading requested statistics...")
    start, end = args.date
    nba_result = sportsstats.nba.Downloader(start, end).download()
    #  if args.output:
            #  args.output.write(nba_result.json)
    if logger.isEnabledFor(logging.DEBUG):
        import pprint
        pp = pprint.PrettyPrinter(indent=1)
        logger.debug("Result data:\n{}".format(pp.pformat(nba_result.data)))
    print("Updating database...")
    db = sportsstats.nba.Database(nba_result)
    db.update()

if __name__ == '__main__':
    import sys
    sys.exit(main())
